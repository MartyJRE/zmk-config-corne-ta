#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0 // default_layer index
#define NUMBERS 1 // lower_layer index
#define SYMBOLS 2 // raise_layer index
#define SYSTEM 3 // tri_layer index
#define MACROS 4 // macro_layer index

// Meh = Ctrl + Shift + Alt
#define MEH LA(LC(LSHIFT))
// Import = Alt + Shift + Enter
#define IMP LA(LS(ENTER))
// Action = Alt + Enter
#define ACT LA(ENTER)
// Back = Alt + Command + <-
#define BC LA(LG(LEFT))
// Forward = Alt + Command + ->
#define FW LA(LG(RIGHT))


&caps_word {
    // when using caps word, allow for undescore and minus as they are commonly used for constants in programming languages
    continue-list = <DELETE BACKSPACE UNDERSCORE LEFT RIGHT LCTRL RCTRL LGUI RGUI>;
};

&mt {
    // sane defaults
    tapping-term-ms = <250>;
    flavor = "tap-preferred";
};

&soft_off {
    hold-time-ms = <100>;
};

/ {
    macros {
        rename: rename {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_tap &kp R>
                , <&macro_release &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_wait_time 100>
                , <&macro_tap &kp R>
                ;
        };
        signature: signature {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_tap &kp C>
                , <&macro_release &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_wait_time 100>
                , <&macro_tap &kp S>
                ;
        };
        constant: constant {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_tap &kp R>
                , <&macro_release &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_wait_time 100>
                , <&macro_tap &kp C>
                ;
        };
        field: field {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_tap &kp R>
                , <&macro_release &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_wait_time 100>
                , <&macro_tap &kp F>
                ;
        };
        param: param {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_tap &kp R>
                , <&macro_release &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_wait_time 100>
                , <&macro_tap &kp P>
                ;
        };
        method: method {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_tap &kp R>
                , <&macro_release &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_wait_time 100>
                , <&macro_tap &kp M>
                ;
        };
        inl: inl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI &kp LALT>
                , <&macro_tap &kp N>
                , <&macro_release &kp LGUI &kp LALT>
                ;
        };
        cloneUp: cloneUp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_tap &kp UP>
                , <&macro_release &kp LCTRL &kp LALT &kp LSHIFT>
                ;
        };
        cloneDown: cloneDown {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_tap &kp DOWN>
                , <&macro_release &kp LCTRL &kp LALT &kp LSHIFT>
                ;
        };
        cloneLeft: cloneLeft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_tap &kp LEFT>
                , <&macro_release &kp LCTRL &kp LALT &kp LSHIFT>
                ;
        };
        cloneRight: cloneRight {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp LSHIFT>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp LCTRL &kp LALT &kp LSHIFT>
                ;
        };
    };
};

// Key index reference:

// 00 01 02 03 04 05 | 06 07 08 09 10 11
// 12 13 14 15 16 17 | 18 19 20 21 22 23
// 24 25 26 27 28 29 | 30 31 32 33 34 35
//          36 37 38 | 39 40 41

#define LEFT_MOD 36 // left thumb layer modifier key index
#define RIGHT_MOD 41 // right thumb layer modifier key index

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            // Switch to system layer if both layer switch keys are pressed at the same time
            if-layers = <NUMBERS SYMBOLS>;
            then-layer = <SYSTEM>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "ABC";
            bindings = <
                &kp DEL       &mt RG(Q) Q &mt RG(W) W &kp E       &mt RG(R) R &mt RG(T) T      &lt MACROS Y     &kp U     &kp I      &kp O   &kp P         &kp BSLH
                &mt LCTRL ESC &mt RG(A) A &mt RG(S) S &mt LBKT D  &mt LPAR F  &mt LBRC G       &mt RBRC H    &mt RPAR J    &mt RBKT K &kp L   &kp SEMI      &kp SQT
                &kp LSHFT     &mt RG(Z) Z &mt RG(X) X &mt RG(C) C &mt RG(V) V &mt RG(B) B      &mt LGUI N    &mt LG(M) M   &kp COMMA  &kp DOT &mt LG(FSLH) FSLH &kp RCTRL
                                      &mo NUMBERS &mt RGUI SPACE  &kp BSPC     &mt RGUI TAB  &mt RALT RET  &mo SYMBOLS
            >;
        };

        lower_layer {
            label = "123";
            bindings = <
                &trans &kp N1 &kp N2 &kp N3    &kp N4    &kp N5         &kp N6 &kp N7    &kp N8   &kp N9    &kp N0 &trans
                &trans &trans &trans &kp GRAVE &kp EQUAL &trans         &trans &kp MINUS &kp UP   &trans    &trans &trans
                &trans &trans &trans &kp LCTRL &kp LALT  &kp LA(LG(B))   &trans &kp LEFT  &kp DOWN &kp RIGHT &trans &trans
                             &trans    &trans    &trans         &trans &trans    &trans
            >;
        };

        raise_layer {
            label = "$!?";
            bindings = <
                &trans &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT      &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &trans
                &trans &trans  &trans &kp SPACE &kp LGUI &trans     &trans    &mt MEH   &trans      &trans   &trans   &trans
                &trans &trans   &trans &trans   &trans   &trans     &trans    &trans    &trans      &trans   &trans   &trans
                               &trans   &trans   &trans     &trans    &trans    &trans
            >;
        };

        tri_layer {
            label = "SYS";
            bindings = <
                &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &trans      &cloneUp  &trans  &trans &trans  &trans
                &trans     &trans       &trans       &cloneLeft       &kp LGUI    &kp BC       &kp FW       &kp TAB &cloneRight &kp ACT &kp IMP &trans
                &trans  &trans       &trans       &caps_word   &trans       &trans       &trans      &cloneDown  &trans  &trans &trans  &trans
                                     &trans       &trans       &trans       &trans      &trans  &trans
            >;
        };

        macro_layer {
            label = "MCR";
            bindings = <
                &trans &trans &trans &trans &rename &trans      &trans &trans  &inl &trans &param &trans
                &trans &trans  &signature &trans &field &trans     &trans    &trans   &trans      &trans   &trans   &trans
                &trans &trans   &trans &constant   &trans   &trans     &trans    &method    &trans      &trans   &trans   &trans
                               &trans   &trans   &trans     &trans    &trans    &trans
            >;
        };
    };
};
